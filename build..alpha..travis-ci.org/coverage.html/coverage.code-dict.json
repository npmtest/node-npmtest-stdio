{"/home/travis/build/npmtest/node-npmtest-stdio/test.js":"/* istanbul instrument in package npmtest_stdio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-stdio/lib.npmtest_stdio.js":"/* istanbul instrument in package npmtest_stdio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_stdio = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_stdio = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-stdio/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-stdio && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_stdio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_stdio\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_stdio.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_stdio.rollup.js'] =\n            local.assetsDict['/assets.npmtest_stdio.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_stdio.__dirname +\n                    '/lib.npmtest_stdio.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-stdio/node_modules/stdio/main.js":"/**     _      _ _\n *  ___| |_ __| (_) ___\n * / __| __/ _` | |/ _ \\\n * \\__ \\ || (_| | | (_) |\n * |___/\\__\\__,_|_|\\___/\n *\n * Standard input/output management for NodeJS\n *\n * Copyright (c) 2013- Sergio García <sgmonda@gmail.com>\n * Distributed under MIT License\n *\n **/\n\n// Command-line arguments parsing\nexports.getopt = require('./lib/getopt.js').getopt;\n\n// Terminal questions/forms\nexports.question = require('./lib/question.js').question;\n\n// Input reading\nvar reading = require('./lib/reading.js');\nexports.read = reading.read;\nexports.readByLines = reading.readByLines;\n\n// Progress bar\nvar progress = require('./lib/progress.js');\nexports.progressBar = progress.progressBar;\n","/home/travis/build/npmtest/node-npmtest-stdio/node_modules/stdio/lib/getopt.js":"'use strict';\n\nvar util = require('./util.js');\n\n/**\n * Check if an argument seems to be a number\n **/\nfunction isNumericalArgument(arg) {\n\treturn (/^[\\d\\-.,]+$/).test(arg);\n}\n\n/**\n * Check if an arguments item is an option or an option's argument\n **/\nfunction isAnOption(arg) {\n\treturn arg[0] === '-' && !isNumericalArgument(arg);\n}\n\n/**\n * Process an arguments list and refactorizes it replacing each -a=b element for two new elements: -a and b\n **/\nfunction preProcessArguments (argv) {\n\n\tvar processedArgs = [];\n\targv.forEach(function (arg) {\n\n\t\t// If the argument is not an option, do not touch it\n\t\tif (arg[0] !== '-' || isNumericalArgument(arg)) {\n\t\t\tprocessedArgs.push(arg);\n\t\t\treturn;\n\t\t}\n\n\t\t// For collapsed options, like \"-abc\" instead of \"-a -b -c\"\n\t\tif (arg[0] === '-' && arg[1] !== '-' && arg.length > 2 && arg.indexOf('=') === -1) {\n\t\t\tprocessedArgs = processedArgs.concat(arg.slice(1).split('').map(function (x) {\n\t\t\t\treturn '-' + x;\n\t\t\t}));\n\t\t\treturn;\n\t\t}\n\n\t\t// The general case, without collapsed options or assignments\n\t\tif (arg[0] !== '-' || arg.indexOf('=') === -1) {\n\t\t\tprocessedArgs.push(arg);\n\t\t\treturn;\n\t\t}\n\n\t\t// For assignment options, like \"-b=2\" instead of \"-b 2\"\n\t\targ = arg.match(/(.*?)=(.*)/);\n\t\tprocessedArgs.push(arg[1]);\n\t\tprocessedArgs.push(arg[2]);\n\t});\n\treturn processedArgs;\n}\n\n/**\n * Builds an arguments map from a processed arguments list and a getopt() options object\n **/\nfunction extractArgumentsMap (argv, config) {\n\n\t/**\n\t * Find the nearest option of a provided one\n\t **/\n\tfunction getNearestOption(option) {\n\t\tvar options = Object.keys(config);\n\t\tvar minDistance = Infinity;\n\t\tvar nearestWord = null;\n\t\toptions.forEach(function (o) {\n\t\t\tvar d = util.textDistance(o, option);\n\t\t\tif (d < minDistance) {\n\t\t\t\tminDistance = d;\n\t\t\t\tnearestWord = o;\n\t\t\t}\n\t\t});\n\t\tif (minDistance < 3) {\n\t\t\treturn nearestWord;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Find the option name of an argument key\n\t **/\n\tfunction getOptionNameFromArgument (key) {\n\n\t\t// If key is a large form, then it is the option name itself\n\t\tif (key.indexOf('--') === 0) {\n\t\t\treturn key.slice(2);\n\t\t}\n\n\t\t// If key is a short form, then we have to find the option name\n\t\tkey = key.slice(1);\n\t\tfor (var option in config) {\n\t\t\tif (config[option].key === key) {\n\t\t\t\treturn option;\n\t\t\t}\n\t\t}\n\n\t\t// If no name is found, throw an error\n\t\tconsole.log('Unknown option: \"-' + key + '\".');\n\t\tconsole.log('Try \"--help\" for more information.');\n\t\tprocess.exit(-1);\n\t}\n\n\t/**\n\t * Check if all arguments have been already specified for an option\n\t **/\n\tfunction isOptionCompleted (option) {\n\n\t\t// args option is never fully specified, so any free argument is always a part of it\n\t\tif (option === 'args') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Multiple arguments are not fully specified. They can be repeated many times\n\t\tif (config[option].multiple) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Variable arguments count\n\t\tif (config[option].args === '*') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Get the expected arguments count\n\t\tvar expected = config[option].args;\n\t\tif (expected && typeof expected !== 'number') {\n\t\t\tthrow new Error('\"args\" attribute has to be a number or the string \"*\" when specifying getopt() settings');\n\t\t}\n\n\t\t// Compute how many arguments have been already specified and how many ones are expected\n\t\tvar argsCount = 0;\n\t\tif (config[option]) {\n\t\t\tif (Array.isArray(options[option])) {\n\t\t\t\targsCount = options[option].length;\n\t\t\t} else if (options[option] !== true){\n\t\t\t\targsCount = 1;\n\t\t\t} else {\n\t\t\t\targsCount = 0;\n\t\t\t}\n\t\t}\n\n\t\treturn !expected || (argsCount === expected);\n\t}\n\n\t// Remove \"node\" and \"program.js\", then preprocess arguments array\n\targv = argv.slice(2);\n\targv = preProcessArguments(argv);\n\n\tvar options = {};\n\tvar lastArgument;\n\n\tfor (var i = 0, len = argv.length; i < len; i++) {\n\n\t\t// Not allowed arguments\n\t\tif (argv[i] === '-' || argv[i] == '--') {\n\t\t\tconsole.log('Wrong argument provided: \"%s\".\\nTry \"--help\" for more information.', argv[i]);\n\t\t\tprocess.exit(-1);\n\t\t}\n\n\t\tif (isAnOption(argv[i])) {\n\n\t\t\t// It is an option name (not an argument for an option)\n\n\t\t\tlastArgument = getOptionNameFromArgument(argv[i]);\n\t\t\tif (!config[lastArgument]) {\n\t\t\t\tvar strError = 'Unknown option \"--' + lastArgument + '\".';\n\t\t\t\tvar suggestion = getNearestOption(lastArgument);\n\t\t\t\tif (suggestion) {\n\t\t\t\t\tstrError += ' Did you mean \"--' + suggestion + '\"?';\n\t\t\t\t}\n\t\t\t\tstrError += '\\nTry \"--help\" for more information.';\n\t\t\t\tconsole.log(strError);\n\t\t\t\tprocess.exit(-1);\n\t\t\t}\n\t\t\toptions[lastArgument] = options[lastArgument] || true;\n\n\t\t} else {\n\n\t\t\t// It is an argument for an option\n\n\t\t\tif (!lastArgument || isOptionCompleted(lastArgument)) {\n\t\t\t\tlastArgument = 'args';\n\t\t\t} else if ((config[lastArgument] || {}).multiple && i > 0 && !isAnOption(argv[i - 1])) {\n\t\t\t\tlastArgument = 'args';\n\t\t\t}\n\n\t\t\tif (options[lastArgument] === true) {\n\t\t\t\toptions[lastArgument] = argv[i];\n\t\t\t} else if (Array.isArray(options[lastArgument])) {\n\t\t\t\toptions[lastArgument].push(argv[i]);\n\t\t\t} else if (lastArgument === 'args') {\n\t\t\t\toptions[lastArgument] = [argv[i]];\n\t\t\t} else {\n\t\t\t\toptions[lastArgument] = [options[lastArgument]];\n\t\t\t\toptions[lastArgument].push(argv[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn options;\n}\n\n/**\n * Core getopt function\n **/\nfunction getopt (config, helpTail, argv, testing) {\n\n\targv = argv || process.argv;\n\tconfig = config || {};\n\tvar programName = argv[1].split('/').pop();\n\n\t// Help option cannot be overrided\n\tif (config.help) {\n\t\tthrow new Error('\"--help\" option is reserved for the automatic help message. You cannot override it when calling getopt().');\n\t}\n\n\tvar usedKeys = {};\n\tvar key, option;\n\tfor (option in config) {\n\n\t\tkey = config[option].key;\n\n\t\tif (!key) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Short options name has to be unique\n\t\tif (usedKeys[key]) {\n\t\t\tthrow new Error('Short key \"' + key + '\" is repeated in getopt() config. You cannot use the same key for two options.');\n\t\t}\n\n\t\t// Multiple option is not compatible with args count\n\t\tif (config[option].multiple && ('args' in config[option])) {\n\t\t\tthrow new Error('\"args\" count cannot be specified for options marked with \"multiple\" flag.');\n\t\t}\n\t\tusedKeys[key] = true;\n\t}\n\n\t// Print help message when executing with --help or -h\n\tif (argv.indexOf('--help') !== -1) {\n\t\tprintHelpMessage(config, helpTail, programName);\n\t\tprocess.exit(0);\n\t}\n\n\t// Build de options/arguments map\n\tvar cmdOptions = extractArgumentsMap(argv, config);\n\n\t// Check every mandatory option is specified\n\tfor (option in config) {\n\t\tif (option === '_meta_') {\n\t\t\tcontinue;\n\t\t}\n\t\tif (config[option].mandatory && !(option in cmdOptions)) {\n\t\t\tif (testing) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconsole.log('Missing \"%s\" argument.\\nTry \"--help\" for more information.', option);\n\t\t\tprocess.exit(-1);\n\t\t}\n\t\tif (!(option in cmdOptions)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Check all required arguments have been specified for each option\n\t\tvar requiredArgumentsCount = config[option].args;\n\t\tvar providedArgumentsCount = cmdOptions[option] === true ? 0 : (Array.isArray(cmdOptions[option]) ? cmdOptions[option].length : 1);\n\t\tif (requiredArgumentsCount > 1 && providedArgumentsCount !== requiredArgumentsCount) {\n\t\t\tif (testing) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconsole.log('Option \"--%s\" requires %d arguments, but %d were provided. Try \"--help\" for more information.', option, requiredArgumentsCount, providedArgumentsCount);\n\t\t\tprintHelpMessage(config, helpTail, programName);\n\t\t\tprocess.exit(-1);\n\t\t}\n\t}\n\n\t// Check expected positional arguments are provided\n\tvar providedArgs = 0;\n\tif (Array.isArray(cmdOptions.args) && cmdOptions.args.length > 0) {\n\t\tprovidedArgs = cmdOptions.args.length;\n\t}\n\tif (config._meta_ && config._meta_.args && providedArgs !== config._meta_.args) {\n\t\tconsole.log('%d positional arguments (without option flag) are required, but %d have been provided.', config._meta_.args, providedArgs);\n\t\tprintHelpMessage(config, helpTail, programName);\n\t\tprocess.exit(-1);\n\t}\n\tif (config._meta_ && config._meta_.minArgs && providedArgs < config._meta_.minArgs) {\n\t\tconsole.log('At least %d positional arguments (without option flag) are required, but %d have been provided.', config._meta_.minArgs, providedArgs);\n\t\tprintHelpMessage(config, helpTail, programName);\n\t\tprocess.exit(-1);\n\t}\n\tif (config._meta_ && config._meta_.maxArgs && providedArgs > config._meta_.maxArgs) {\n\t\tconsole.log('Too many positional arguments (without option flag) provided. The maximum allowed is %d, but %d have been provided.', config._meta_.maxArgs, providedArgs);\n\t\tprintHelpMessage(config, helpTail, programName);\n\t\tprocess.exit(-1);\n\t}\n\n\t// Apply default values\n\tfor (option in config) {\n\t\tif (typeof config[option] === 'object' && 'default' in config[option]) {\n\t\t\tif ((!Array.isArray(config[option]['default']) && parseInt(config[option].args, 10) > 1) ||\n\t\t\t\t(Array.isArray(config[option]['default']) && config[option]['default'].length !== parseInt(config[option].args, 10))) {\n\t\t\t\tthrow new Error('Default value of an option must have the same length as specified by its \"args\" attribute');\n\t\t\t}\n\t\t\tcmdOptions[option] = cmdOptions[option] || config[option]['default'];\n\t\t}\n\n\t}\n\n\t// A function to print help message manually\n\tcmdOptions.printHelp = function () {\n\t\tprintHelpMessage(config, helpTail, programName);\n\t};\n\n\treturn cmdOptions;\n}\n\n/**\n * Prints the help (--help, -h)\n **/\nfunction printHelpMessage(options, helpTail, programName) {\n\n\thelpTail = helpTail || 'node ' + programName + ' [OPTION1] [OPTION2]... arg1 arg2...';\n\tconsole.log('USAGE:', helpTail);\n\tconsole.log('The following options are supported:');\n\n\tvar o = null, lines = [], maxLength;\n\n\tfor (o in options) {\n\t\tif (o === '_meta_') {\n\t\t\tcontinue;\n\t\t}\n\t\tif (options.hasOwnProperty(o)) {\n\t\t\tvar ops = ' ', i;\n\t\t\tif (options[o].multiple) {\n\t\t\t\toptions[o].args = 1;\n\t\t\t}\n\t\t\tfor (i = 0; i < options[o].args; i++) {\n\t\t\t\tops += '<ARG' + (i + 1) + '> ';\n\t\t\t}\n\t\t\tif (options[o].args === '*') {\n\t\t\t\tops += '<ARG1>...<ARGN>';\n\t\t\t}\n\t\t\tlines.push(['  ' + (options[o].key ? '-' + options[o].key + ', --' : '--') + o + ops, (options[o].description || '') + (options[o].mandatory ? ' (mandatory)' : '') + (options[o].multiple ? ' (multiple)' : '' + (options[o]['default'] ? ' (\"' + options[o]['default'] + '\" by default)' : ''))]);\n\t\t}\n\t}\n\n\tmaxLength = lines.reduce(function (prev, curr) {\n\t\tvar aux = curr[0].length;\n\t\tif (aux > prev) {\n\t\t\treturn aux;\n\t\t}\n\t\treturn prev;\n\t}, 0);\n\n\tlines = lines.map(function (l) {\n\t\treturn l[0] + (new Array(maxLength - l[0].length + 1)).join(' ') + '\\t' + l[1];\n\t});\n\n\tconsole.log(lines.join('\\n'));\n\n}\n\n// Exports\nmodule.exports.getopt = getopt;\nmodule.exports.preProcessArguments = preProcessArguments;\n","/home/travis/build/npmtest/node-npmtest-stdio/node_modules/stdio/lib/util.js":"'use strict';\n\n/**\n * Computes the Levenshtein distance between two strings\n * More info here: http://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance#JavaScript\n **/\nexports.textDistance = function (a, b) {\n\n\tif(a.length === 0) {\n\t\treturn b.length;\n\t}\n\tif(b.length === 0) {\n\t\treturn a.length;\n\t}\n\t\n\tvar matrix = [];\n\t\n\t// increment along the first column of each row\n\tvar i;\n\tfor(i = 0; i <= b.length; i++){\n\t\tmatrix[i] = [i];\n\t}\n\t\n\t// increment each column in the first row\n\tvar j;\n\tfor(j = 0; j <= a.length; j++){\n\t\tmatrix[0][j] = j;\n\t}\n\t\n\t// Fill in the rest of the matrix\n\tfor(i = 1; i <= b.length; i++){\n\t\tfor(j = 1; j <= a.length; j++){\n\t\t\tif(b.charAt(i-1) == a.charAt(j-1)){\n\t\t\t\tmatrix[i][j] = matrix[i-1][j-1];\n\t\t\t} else {\n\t\t\t\tmatrix[i][j] = Math.min(matrix[i-1][j-1] + 1, Math.min(matrix[i][j-1] + 1, matrix[i-1][j] + 1));\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn matrix[b.length][a.length];\n};\n","/home/travis/build/npmtest/node-npmtest-stdio/node_modules/stdio/lib/question.js":"'use strict';\n\nvar MAX_PROMPT_TRIES = 3;\n\n/**\n * Shows a prompt question, letting the user to answer it.\n * @param {string}   question Question text\n * @param {array}    options  Possible answers (optional)\n * @param {function} callback Function to call with the results: function (err, responseText) {...}\n **/\nfunction askQuestion(question, options, callback) {\n\n\t// Options can be omited\n\tif (typeof options === 'function') {\n\t\tcallback = options;\n\t\toptions = null;\n\t}\n\n\t// Throw possible errors\n\tif (!question) {\n\t\tthrow new Error('Stdio prompt question is malformed. It must include at least a question text.');\n\t}\n\tif (options && (!Array.isArray(options) || options.length < 2)) {\n\t\tthrow new Error('Stdio prompt question is malformed. Provided options must be an array with two options at least.');\n\t}\n\n\t/**\n\t * Prints the question\n\t **/\n\tvar performQuestion = function () {\n\t\tvar str = question;\n\t\tif (options) {\n\t\t\tstr += ' [' + options.join('/') + ']';\n\t\t}\n\t\tstr += ': ';\n\t\tprocess.stdout.write(str);\n\t};\n\n\tvar tries = MAX_PROMPT_TRIES;\n\n\tprocess.stdin.resume();\n\n\tvar listener = function (data) {\n\n\t\tvar response = data.toString().toLowerCase().trim();\n\n\t\tif (options && options.indexOf(response) === -1) {\n\t\t\tconsole.log('Unexpected answer. %d retries left.', tries - 1);\n\t\t\ttries--;\n\t\t\tif (tries === 0) {\n\t\t\t\tprocess.stdin.removeListener('data', listener);\n\t\t\t\tprocess.stdin.pause();\n\t\t\t\tcallback('Retries spent');\n\t\t\t} else {\n\t\t\t\tperformQuestion();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tprocess.stdin.removeListener('data', listener);\n\t\tprocess.stdin.pause();\n\t\tcallback(false, response);\n\t};\n\n\tprocess.stdin.addListener('data', listener);\n\tperformQuestion();\n}\n\n// Exports\nmodule.exports.question = askQuestion;\n","/home/travis/build/npmtest/node-npmtest-stdio/node_modules/stdio/lib/reading.js":"'use strict';\n\n/**\n * Reads the complete standard input\n * @param {function} callback Function to call when finished: function (wholeInputText) {...}\n */\nfunction read(callback) {\n\n\tif (!callback) {\n\t\tthrow new Error('no callback provided to readInput() call');\n\t}\n\n\tvar inputdata = '';\n\tprocess.stdin.resume();\n\n\tvar listener = function (text) {\n\t\tif (!text) {\n\t\t\treturn;\n\t\t}\n\t\tinputdata += String(text);\n\t};\n\n\tprocess.stdin.on('data', listener);\n\n\tprocess.stdin.on('end', function () {\n\t\tprocess.stdin.removeListener('data', listener);\n\t\tcallback(inputdata);\n\t});\n}\n\n/**\n * Reads the standard input by lines and apply a function to every line\n * @param {function} lineProcessor Function to call for every line: function (line) {...}\n * @param {function} callback      Function to call when finished: function (err) {...}\n **/\nfunction readByLines(lineProcessor, callback) {\n\n\tvar index = 0;\n\n\tvar readline = require('readline');\n\tvar rl = readline.createInterface({\n\t\tinput: process.stdin,\n\t\toutput: process.stdout,\n\t\tterminal: false\n\t});\n\trl.on('line', function (line) {\n\t\tlineProcessor(line, index);\n\t\tindex++;\n\t});\n\tif (callback) {\n\t\trl.on('close', callback);\n\t}\n}\n\n// Exports\nmodule.exports.read = read;\nmodule.exports.readByLines = readByLines;\n","/home/travis/build/npmtest/node-npmtest-stdio/node_modules/stdio/lib/progress.js":"'use strict';\n\n/**\n * Progress bar class\n **/\nfunction ProgressBar(maxValue, incrementValue) {\n\n\tvar self = this;\n\tself.value = 0;\n\tself.incrementValue = incrementValue || 1;\n\tself.MAX_VALUE = maxValue || 100;\n\tself.startTime = Date.now();\n\n\t/**\n\t * Transforms a number of seconds into an string representing the\n\t * hours, minutes and seconds in format HH:MM:SS\n\t **/\n\tfunction secondsToTimeString(seconds) {\n\t\tvar minutes = 0, hours = 0;\n\t\tif (seconds / 60 > 0) {\n\t\t\tminutes = parseInt(seconds / 60, 10);\n\t\t\tseconds = seconds % 60;\n\t\t}\n\t\tif (minutes / 60 > 0) {\n\t\t\thours = parseInt(minutes / 60, 10);\n\t\t\tminutes = minutes % 60;\n\t\t}\n\t\treturn ('0' + hours).slice(-2) + ':' + ('0' + minutes).slice(-2) + ':' + ('0' + seconds).slice(-2);\n\t}\n\n\t/**\n\t * Computes the amount of seconds from the begining of the progress\n\t **/\n\tself.getEllapsedTime = function () {\n\t\treturn parseInt((Date.now() - self.startTime) / 1000, 10);\n\t};\n\n\t/**\n\t * Computes the estimated remaining time in seconds\n\t **/\n\tself.getRemainingTime = (function () {\n\t\tvar lastRemainingTimes = [];\n\t\treturn function () {\n\t\t\tvar secondsPerTick = self.getEllapsedTime() / self.value;\n\t\t\tvar remaining = parseInt((self.MAX_VALUE - self.value) * secondsPerTick, 10);\n\t\t\tlastRemainingTimes.push(remaining);\n\t\t\tif (lastRemainingTimes.length > 5) {\n\t\t\t\tlastRemainingTimes.shift();\n\t\t\t}\n\t\t\treturn parseInt(lastRemainingTimes.reduce(function (acum, item) {\n\t\t\t\treturn acum + item;\n\t\t\t}, 0) / lastRemainingTimes.length, 10);\n\t\t};\n\t}());\n\n\t/**\n\t * Sets the current value of the progress bar.\n\t * It must be a number between 0 and the MAX_VALUE of the bar\n\t **/\n\tself.setValue = function (value) {\n\t\tself.value = value;\n\t\tif (self.value > self.MAX_VALUE) {\n\t\t\tself.value = self.MAX_VALUE;\n\t\t}\n\t\tself.print();\n\t\tif (self.value === self.MAX_VALUE && self.finishedCallback) {\n\t\t\tprocess.stdout.write('\\n');\n\t\t\tself.finishedCallback();\n\t\t\tself.finishedCallback = null;\n\t\t}\n\t};\n\n\t/**\n\t * Increment the current value by the specified increment\n\t **/\n\tself.tick = function () {\n\t\tself.value += self.incrementValue;\n\t\tif (self.value > self.MAX_VALUE) {\n\t\t\tself.value = self.MAX_VALUE;\n\t\t}\n\t\tself.print();\n\t\tif (self.value === self.MAX_VALUE) {\n\t\t\tprocess.stdout.write('\\n');\n\t\t\tif (self.finishedCallback) {\n\t\t\t\tself.finishedCallback();\n\t\t\t\tself.finishedCallback = null;\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Replaces the previous bar print with the current one, updating the status\n\t **/\n\tself.print = function () {\n\n\t\tvar ellapsedTime = secondsToTimeString(self.getEllapsedTime());\n\t\tvar percent = parseInt(self.value * 100 / self.MAX_VALUE, 10);\n\t\tvar prefix = ellapsedTime + ' ' + percent + '%';\n\n\t\tvar eta = secondsToTimeString(self.getRemainingTime());\n\t\tvar sufix = 'ETA ' + eta;\n\n\t\tprocess.stdout.write('\\r');\n\t\tvar TERMINAL_WIDTH = process.stdout.width || 70;\n\t\tvar ticks = [];\n\n\t\tfor (var i = 0, len = (TERMINAL_WIDTH - ellapsedTime.length - 3); i < len; i++) {\n\t\t\tif ((i * 100 / len) <= percent) {\n\t\t\t\tticks.push('#');\n\t\t\t} else {\n\t\t\t\tticks.push('·');\n\t\t\t}\n\t\t}\n\n\t\tprocess.stdout.write(prefix + ' [' + ticks.join('') + '] ' + sufix);\n\t};\n\n\t/**\n\t * Receives a function to call when progress finishes\n\t **/\n\tself.onFinish = function (callback) {\n\t\tself.finishedCallback = callback;\n\t};\n\n}\n\n// Exports\n\nexports.progressBar = function (max, increment) {\n\tvar p = new ProgressBar(max, increment);\n\treturn p;\n};\n"}